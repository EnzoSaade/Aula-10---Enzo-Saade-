import streamlit as st
import random

# --- Configura√ß√£o Inicial e Vari√°veis de Estado ---

def init_session_state():
    """Inicializa as vari√°veis de estado da sess√£o."""
    if 'name' not in st.session_state:
        st.session_state.name = ""
    if 'score' not in st.session_state:
        st.session_state.score = 0
    if 'game_started' not in st.session_state:
        st.session_state.game_started = False
    if 'current_answer' not in st.session_state:
        st.session_state.current_answer = None
    if 'last_attempt_correct' not in st.session_state:
        st.session_state.last_attempt_correct = None
    if 'question' not in st.session_state:
        st.session_state.question = None
    if 'level_max_value' not in st.session_state:
        # Valor inicial para a dificuldade (limite m√°ximo para os n√∫meros da soma)
        st.session_state.level_max_value = 10 

def reset_game():
    """Reinicia a pontua√ß√£o e a dificuldade do jogo."""
    st.session_state.score = 0
    st.session_state.level_max_value = 10
    st.session_state.last_attempt_correct = None
    generate_new_question()

def generate_new_question():
    """Gera uma nova quest√£o com base no n√≠vel de dificuldade atual."""
    # O m√°ximo √© 10 (n√≠vel 1) at√© 1000 (n√≠vel 10)
    max_val = st.session_state.level_max_value 
    
    # Gera dois n√∫meros aleat√≥rios entre 1 e o valor m√°ximo
    num1 = random.randint(1, max_val)
    num2 = random.randint(1, max_val)
    
    question = f"{num1} + {num2}"
    answer = num1 + num2
    
    st.session_state.question = (question, answer)
    st.session_state.current_answer = None # Limpa a resposta anterior
    
    # Aumenta a dificuldade para a pr√≥xima rodada (ex: 10, 20, 40, 80, 160...)
    # O aumento √© progressivo.
    if st.session_state.score < 10:
        st.session_state.level_max_value = int(10 * (1.5 ** st.session_state.score))
    
    # Garante que o valor m√°ximo n√£o seja absurdamente grande
    if st.session_state.level_max_value > 1000:
        st.session_state.level_max_value = 1000
    
    # FOR√áANDO O RE-RUN: CORRE√á√ÉO APLICADA AQUI
    st.rerun()


def check_answer():
    """Verifica a resposta do usu√°rio."""
    # O valor digitado pelo usu√°rio est√° em st.session_state.user_input, 
    # pois o widget tem a 'key="user_input"'
    user_input = st.session_state.user_input
    
    if st.session_state.question is None:
        return

    _, correct_answer = st.session_state.question

    try:
        user_answer_num = int(user_input)
        
        if user_answer_num == correct_answer:
            st.session_state.score += 1
            st.session_state.last_attempt_correct = True
            
            if st.session_state.score < 10:
                st.success(f"Parab√©ns, {st.session_state.name}! Resposta correta!")
                generate_new_question()
            else:
                # O jogo termina com 10 acertos
                pass 
            
        else:
            st.error(f"Resposta incorreta, {st.session_state.name} üòî. A resposta correta era **{correct_answer}**.")
            st.session_state.last_attempt_correct = False
            st.session_state.game_started = False # Fim do jogo por erro
            
    except ValueError:
        st.warning("Por favor, digite apenas um n√∫mero inteiro.")


# --- Layout do Aplicativo Streamlit ---

# Inicializa o estado da sess√£o
init_session_state()

st.set_page_config(
    page_title="Desafio de Matem√°tica com Streamlit",
    layout="centered",
    initial_sidebar_state="collapsed"
)

st.title("üß† Desafio da Matem√°tica com Streamlit")

# √Årea de Entrada do Nome do Usu√°rio
# Esta se√ß√£o s√≥ aparece se o nome ainda n√£o foi definido
if not st.session_state.name:
    st.header("Seja Bem-Vindo(a)!")
    
    with st.form(key='name_form'):
        name_input = st.text_input("Qual √© o seu nome?", key="input_name_widget")
        submit_button = st.form_submit_button("Come√ßar Desafio")
        
        if submit_button and name_input:
            st.session_state.name = name_input.title().strip()
            st.session_state.game_started = True
            st.success(f"Ol√°, {st.session_state.name}! Preparado(a) para o Desafio?")
            generate_new_question()
        elif submit_button and not name_input:
            st.warning("Por favor, digite seu nome para come√ßar.")

# --- L√≥gica do Jogo ---

elif st.session_state.game_started and st.session_state.score < 10:
    # Jogo em andamento

    st.markdown(f"### Ol√°, **{st.session_state.name}**!")
    st.info("O objetivo √© acertar **10 quest√µes** seguidas. Se errar, o desafio termina e voc√™ ter√° que come√ßar novamente!")
    
    # Exibe a pontua√ß√£o e o n√≠vel de dificuldade
    col1, col2 = st.columns(2)
    col1.metric("Pontua√ß√£o Atual", st.session_state.score)
    col2.metric("N√≠vel de Dificuldade (M√°x)", st.session_state.level_max_value)
    
    st.markdown("---")
    
    # Exibe a Pergunta
    if st.session_state.question:
        question_text, _ = st.session_state.question
        st.header(f"Quest√£o {st.session_state.score + 1}:")
        st.markdown(f"## Qual √© o resultado de: **{question_text}**?")
        
        # Formul√°rio para a resposta (para melhor controle do estado)
        with st.form(key='quiz_form'):
            answer_input = st.number_input(
                "Sua Resposta:", 
                min_value=0, 
                step=1, 
                key="user_input", 
                help="Digite sua resposta e clique em 'Enviar'."
            )
            submit_answer = st.form_submit_button("Enviar Resposta", on_click=check_answer)
            

# --- Fim de Jogo (Vit√≥ria ou Derrota) ---

elif st.session_state.score == 10:
    # Vit√≥ria
    st.balloons()
    st.success(f"## üèÜ VIT√ìRIA! Parab√©ns, {st.session_state.name}!")
    st.markdown("Voc√™ acertou **10 quest√µes seguidas** e completou o Desafio de Matem√°tica!")
    
    if st.button("Tentar Novamente (Recome√ßar)"):
        reset_game()

elif st.session_state.name and st.session_state.last_attempt_correct == False:
    # Derrota
    st.error(f"## ‚ùå Fim de Jogo, {st.session_state.name}.")
    st.markdown(f"Voc√™ errou a √∫ltima quest√£o. Sua pontua√ß√£o final foi de **{st.session_state.score} acertos**.")
    st.markdown("Mas n√£o desanime! Que tal tentar novamente para completar o desafio?")
    
    if st.button("Tentar Novamente (Recome√ßar)"):
        reset_game()

elif st.session_state.name and not st.session_state.game_started:
    # Tela de espera ap√≥s digitar o nome, antes de iniciar o jogo ou ap√≥s um erro (com nome preenchido)
    st.markdown(f"### Ol√°, **{st.session_state.name}**!")
    st.info("Clique abaixo para come√ßar a primeira quest√£o.")
    if st.button("Iniciar Desafio de Matem√°tica"):
        st.session_state.game_started = True
        reset_game() # Come√ßa o jogo no n√≠vel 1
