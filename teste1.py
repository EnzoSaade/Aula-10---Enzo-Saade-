import streamlit as st
import time

# --- Tema e Configura√ß√µes Iniciais ---
st.set_page_config(
    page_title="37 Anos de Constitui√ß√£o Cidad√£",
    page_icon="üáßüá∑",
    layout="centered"
)

# Estilos Tem√°ticos do Brasil (Verde, Amarelo, Azul)
# Adiciona estilos para cabe√ßalhos e bot√µes de chat para dar um toque brasileiro
st.markdown("""
<style>
/* Fundo da aplica√ß√£o */
.stApp {
    background-color: #f0f8ff; /* Azul claro/branco para neutralidade */
    color: #002776; /* Azul Escuro */
}
/* T√≠tulo Principal */
h1 {
    color: #009246; /* Verde Bandeira */
    text-align: center;
    border-bottom: 3px solid #FFDE00; /* Amarelo Ouro */
    padding-bottom: 10px;
}
/* Subt√≠tulos */
h2 {
    color: #002776; /* Azul Escuro */
}
/* Bot√£o de Chat (Input) */
[data-testid="stFormSubmitButton"] {
    background-color: #009246; /* Verde */
    color: white;
    border-radius: 8px;
    transition: background-color 0.3s;
}
[data-testid="stFormSubmitButton"]:hover {
    background-color: #FFDE00; /* Amarelo no hover */
    color: #002776;
    border: 1px solid #002776;
}
/* Mensagens do Assistente (Para o Di√°logo parecer oficial/constitucional) */
.stChatMessage [data-testid="stMarkdownContainer"] {
    background-color: #E6F3FF; /* Azul Beb√™ para assistente */
    padding: 10px;
    border-radius: 10px;
    border-left: 5px solid #002776; /* Linha Azul Escura */
}
</style>
""", unsafe_allow_html=True)


# --- Dados e Imagens ---
ANIVERSARIO_ANOS = 37
CONSTITUICAO_ANO = 1988
# Imagem placeholder do livro da Constitui√ß√£o
CONSTITUICAO_IMAGE_URL = "https://placehold.co/600x200/002776/ffffff?text=CONSTITUI%C3%87%C3%83O%201988%20|%2037%20ANOS"

# Di√°logo pr√©-definido para simular a intera√ß√£o
DIALOGO = [
    {
        "pergunta": f"Ol√°! Eu sou o Guardi√£o da Lei. Antes de iniciarmos nossa celebra√ß√£o dos **{ANIVERSARIO_ANOS} anos** da nossa Constitui√ß√£o, qual √© o seu nome, Cidad√£o?",
        "estado": "aguardando_nome"
    },
    {
        "pergunta": "Excelente, {nome}! Nossa Constitui√ß√£o √© carinhosamente apelidada de **'Constitui√ß√£o Cidad√£'**. Voc√™ sabe qual √© o principal motivo para este apelido?",
        "estado": "aguardando_apelido",
        "resposta_correta": ["direitos sociais", "democratiza√ß√£o", "cidadania"],
        "dica": "Pense no que ela restaurou para o povo brasileiro ap√≥s o per√≠odo militar."
    },
    {
        "pergunta": "Perfeito! A √™nfase nos **Direitos Sociais** foi um marco. Agora, me diga, o que a Constitui√ß√£o de 88 estabeleceu como **Fundamentos** da Rep√∫blica Federativa do Brasil? (Dica: Pense no famoso 'S O C I D I V A P L U'!)",
        "estado": "aguardando_fundamentos",
        "resposta_correta": ["soberania", "cidadania", "dignidade da pessoa humana", "valores sociais do trabalho e da livre iniciativa", "pluralismo pol√≠tico"],
        "dica": "O Artigo 1¬∫ √© a chave! Um dos fundamentos √© a **Dignidade da Pessoa Humana**."
    },
    {
        "pergunta": "Magn√≠fico! A **Dignidade Humana** √© o pilar. Por √∫ltimo: Qual foi a grande inova√ß√£o de 88 na √°rea da **Seguridade Social**? (Sa√∫de, Previd√™ncia e Assist√™ncia)",
        "estado": "aguardando_seguridade",
        "resposta_correta": ["sa√∫de como direito de todos", "sistema √∫nico de sa√∫de", "sus"],
        "dica": "Come√ßa com a sigla S U S..."
    }
]

# --- Inicializa√ß√£o da Sess√£o ---
if "nome" not in st.session_state:
    st.session_state.nome = None
if "dialogo_step" not in st.session_state:
    st.session_state.dialogo_step = 0
if "messages" not in st.session_state:
    st.session_state.messages = []


# --- Fun√ß√µes de Di√°logo ---

def get_dialogo_message(step):
    """Retorna a pergunta ou encerramento do di√°logo no passo atual."""
    if step < len(DIALOGO):
        return DIALOGO[step]["pergunta"]
    else:
        return f"Parab√©ns, {st.session_state.nome}! Sua dedica√ß√£o aos fundamentos da nossa Rep√∫blica √© inquestion√°vel. A celebra√ß√£o dos {ANIVERSARIO_ANOS} anos da Constitui√ß√£o de 1988 √© um momento de reafirmar a nossa **Democracia** e a **Cidadania** plena. Obrigado por participar! **VIVA O BRASIL!**"

def handle_user_input(user_prompt):
    """Processa a resposta do usu√°rio e avan√ßa o di√°logo."""
    current_step = st.session_state.dialogo_step
    
    if current_step == 0:
        # Passo 0: Coleta o nome
        st.session_state.nome = user_prompt.strip().title()
        st.session_state.dialogo_step = 1
        return get_dialogo_message(st.session_state.dialogo_step)
        
    elif current_step > 0 and current_step < len(DIALOGO):
        # Passos 1 a 3: Valida√ß√£o de respostas
        # CORRE√á√ÉO: Usar current_step diretamente, pois ele indica o √≠ndice da pergunta sendo respondida.
        estado_atual = DIALOGO[current_step]
        respostas_validas = estado_atual["resposta_correta"]
        
        # Normaliza a entrada do usu√°rio para compara√ß√£o
        prompt_normalizado = user_prompt.strip().lower()
        
        # Verifica se alguma palavra-chave correta est√° na resposta
        if any(key in prompt_normalizado for key in respostas_validas):
            st.session_state.dialogo_step += 1
            feedback = "Correto! Isso mostra seu conhecimento da Carta Magna."
        else:
            feedback = f"Sua resposta est√° incompleta. Uma dica: **{estado_atual['dica']}**. Tente novamente!"
            # N√£o avan√ßa o passo, repete a pergunta
            return feedback + "\n\n" + get_dialogo_message(current_step)

        # Se a resposta foi correta, avan√ßa para a pr√≥xima pergunta
        if st.session_state.dialogo_step < len(DIALOGO):
            return feedback + "\n\n" + get_dialogo_message(st.session_state.dialogo_step)
        else:
            # Di√°logo final
            st.session_state.dialogo_step = len(DIALOGO)
            return feedback + "\n\n" + get_dialogo_message(st.session_state.dialogo_step)
            
    else:
        # Di√°logo conclu√≠do
        return "Nossa celebra√ß√£o est√° encerrada! Sinta-se √† vontade para refletir sobre a import√¢ncia da nossa Constitui√ß√£o."


# --- Interface do Usu√°rio ---

st.title(f"üéâ {ANIVERSARIO_ANOS} Anos da Constitui√ß√£o Cidad√£! üéâ")

# Exibe a imagem tem√°tica
st.image(
    CONSTITUICAO_IMAGE_URL,
    caption=f"Constitui√ß√£o Federal de {CONSTITUICAO_ANO} - O Pilar da Democracia Brasileira"
)

st.markdown("---")
st.header("Di√°logo com o Guardi√£o da Lei")

# --- L√≥gica do Chat ---

# Mensagem inicial do assistente (se for o primeiro acesso)
if st.session_state.dialogo_step == 0 and not st.session_state.messages:
    initial_message = get_dialogo_message(0)
    st.session_state.messages.append({"role": "assistant", "content": initial_message})

# Exibe as mensagens hist√≥ricas
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Entrada do usu√°rio
if st.session_state.dialogo_step < len(DIALOGO):
    user_prompt = st.chat_input("Escreva sua resposta aqui...")
    if user_prompt:
        # Adiciona a mensagem do usu√°rio ao hist√≥rico
        st.session_state.messages.append({"role": "user", "content": user_prompt})
        
        # Exibe a mensagem do usu√°rio imediatamente
        with st.chat_message("user"):
            st.markdown(user_prompt)
        
        # Processa a resposta
        response = handle_user_input(user_prompt)
        
        # Exibe a resposta do assistente (com um pequeno delay para efeito de digita√ß√£o)
        with st.chat_message("assistant"):
            st_response = st.empty()
            full_response = ""
            for chunk in response.split():
                full_response += chunk + " "
                st_response.markdown(full_response)
                time.sleep(0.05) # Pequeno delay para efeito
            
            # Adiciona a resposta final ao hist√≥rico
            st.session_state.messages.append({"role": "assistant", "content": response})

else:
    # Quando o di√°logo termina, exibe o encerramento no chat
    # Garantir que a mensagem final seja exibida apenas uma vez
    if not st.session_state.messages or st.session_state.messages[-1]["content"] != get_dialogo_message(len(DIALOGO)):
        final_message = get_dialogo_message(len(DIALOGO))
        st.session_state.messages.append({"role": "assistant", "content": final_message})
        st.chat_message("assistant").markdown(final_message)
    
    st.markdown(f"### üéâ **Parab√©ns, {st.session_state.nome}! Di√°logo Conclu√≠do.** üéâ")

