import streamlit as st
import random

# --- Configura√ß√µes do App (T√≠tulo e Layout) ---
st.set_page_config(
    page_title="Miss√£o Hokage Quiz",
    layout="centered",
    initial_sidebar_state="collapsed",
)

# --- Vari√°veis do Quiz ---
# Di√°logos no estilo Naruto
NARUTO_DIALOGUE = [
    "Acredite! Eu vou me tornar o Hokage!",
    "Eu n√£o vou fugir, nem vou voltar atr√°s na minha palavra! Este √© o meu jeito ninja!",
    "Se voc√™ n√£o gosta do seu destino, n√£o aceite. Em vez disso, tenha a coragem de mud√°-lo!",
    "Dattebayo! Vamos l√°, tente responder a mais uma!",
]

HOKAGE_GOAL = 3 # Pontos necess√°rios para se tornar Hokage

# Perguntas do Quiz
QUIZ_QUESTIONS = [
    {
        "pergunta": "O jutsu secreto do Naruto √© o Rasengan.",
        "resposta": False,
        "explica√ß√£o": "O **Jutsu Secreto** (ou exclusivo) do Naruto √© o **Jutsu Multiclones das Sombras** (Kage Bunshin no Jutsu), n√£o o Rasengan. O Rasengan √© um jutsu de Rank-A.",
    },
    {
        "pergunta": "Naruto Uzumaki se torna o S√©timo Hokage de Konoha.",
        "resposta": True,
        "explica√ß√£o": "Correto! Naruto realiza seu sonho e se torna o **S√©timo Hokage** (Nanadaime Hokage).",
    },
    {
        "pergunta": "O nome do sensei do Time 7 √© Jiraiya.",
        "resposta": False,
        "explica√ß√£o": "Errado! O sensei original do Time 7 era **Kakashi Hatake**. Jiraiya era um dos lend√°rios Sannin e tutor de Naruto.",
    },
    {
        "pergunta": "O dem√¥nio selado dentro de Naruto √© o Nove-Caudas (Kurama).",
        "resposta": True,
        "explica√ß√£o": "Exato! Kurama, a Raposa de Nove-Caudas, estava selado dentro do Naruto.",
    },
    {
        "pergunta": "O cl√£ Uchiha √© famoso por possuir o Byakugan.",
        "resposta": False,
        "explica√ß√£o": "O cl√£ Uchiha √© famoso por possuir o **Sharingan**. O Byakugan pertence ao cl√£ Hy≈´ga.",
    },
]

# Inicializa o estado de sess√£o
if 'score' not in st.session_state:
    st.session_state.score = 0
if 'question_index' not in st.session_state:
    st.session_state.question_index = 0
if 'quiz_started' not in st.session_state:
    st.session_state.quiz_started = False

# --- Fun√ß√µes de L√≥gica ---

def check_answer(user_answer, correct_answer, explanation):
    """Verifica a resposta, atualiza a pontua√ß√£o e exibe feedback."""
    current_index = st.session_state.question_index
    
    # Previne que o usu√°rio responda a mesma pergunta v√°rias vezes e ganhe pontos
    if 'answered_q' not in st.session_state or current_index != st.session_state.answered_q:
        
        st.session_state.answered_q = current_index

        if user_answer == correct_answer:
            st.session_state.score += 1
            st.success(f"**Certo!** üéâ Voc√™ marcou um ponto, Dattebayo!")
        else:
            st.error(f"**Errado!** üòî Ah, que pena! Mas n√£o desista!")
        
        st.info(f"**Explica√ß√£o:** {explanation}")
        st.session_state.show_next = True # Habilita o bot√£o 'Pr√≥xima Pergunta'
    else:
        st.warning("J√° verificamos esta resposta, Ttebayo!")

def next_question():
    """Avan√ßa para a pr√≥xima pergunta."""
    st.session_state.question_index += 1
    st.session_state.show_next = False # Esconde o bot√£o 'Pr√≥xima Pergunta'
    st.session_state.answered_q = -1 # Reseta o controle de resposta

def start_quiz():
    """Inicia o quiz e reseta o estado."""
    st.session_state.quiz_started = True
    st.session_state.score = 0
    st.session_state.question_index = 0
    st.session_state.show_next = False
    st.session_state.answered_q = -1
    random.shuffle(QUIZ_QUESTIONS) # Embaralha as perguntas

# --- Interface do Streamlit ---

st.title("Miss√£o üöÄ Rumo a Hokage! (Quiz Naruto)")

if not st.session_state.quiz_started:
    # Tela Inicial
    st.header("Ei! Eu sou Naruto Uzumaki, e meu sonho √© ser Hokage! Dattebayo!")
    st.markdown("Para provar sua for√ßa e intelig√™ncia e se tornar um verdadeiro Ninja, voc√™ precisa passar neste quiz de **Verdadeiro ou Falso**.")
    st.warning(f"Voc√™ precisa de **{HOKAGE_GOAL}** acertos para se tornar o pr√≥ximo Hokage!")
    
    st.image("https://i.imgur.com/vH1NqXg.png", width=200) # Imagem simples de Naruto (link externo)

    if st.button("Come√ßar Miss√£o!", use_container_width=True, type="primary"):
        start_quiz()
        st.experimental_rerun()
else:
    # --- Jogo em Andamento ---

    current_score = st.session_state.score

    # Verifica se o usu√°rio atingiu o objetivo
    if current_score >= HOKAGE_GOAL:
        st.balloons()
        st.success("## üéâ MISS√ÉO CUMPRIDA! DATTEBAYO! üéâ")
        st.markdown(f"**Parab√©ns!** Com **{current_score}** acertos, voc√™ provou ser digno e se tornou o novo **Hokage** de Konoha! Acredite!")
        st.image("https://i.imgur.com/G3P2w2I.png", width=300) # Imagem de Hokage (link externo)
        if st.button("Recome√ßar o Caminho Ninja", use_container_width=True):
            start_quiz()
            st.experimental_rerun()
        st.stop() # Interrompe a execu√ß√£o do quiz

    # Exibe a pontua√ß√£o e progresso
    st.sidebar.markdown(f"## üç• Sua Pontua√ß√£o (Hokage Meter):")
    st.sidebar.metric(label="Acertos", value=current_score)
    st.sidebar.progress(current_score / HOKAGE_GOAL)
    st.sidebar.markdown(f"**Faltam {HOKAGE_GOAL - current_score} para a gl√≥ria!**")

    # Verifica se ainda h√° perguntas
    if st.session_state.question_index < len(QUIZ_QUESTIONS):
        
        # Pergunta atual
        q_data = QUIZ_QUESTIONS[st.session_state.question_index]
        question_text = q_data["pergunta"]
        correct_answer = q_data["resposta"]
        explanation = q_data["explica√ß√£o"]

        st.markdown("---")
        
        # Di√°logo de Naruto
        st.markdown(f"**Naruto diz:** _{random.choice(NARUTO_DIALOGUE)}_")
        
        st.header(f"Pergunta {st.session_state.question_index + 1}:")
        st.subheader(f"ü§î {question_text}")

        col1, col2 = st.columns(2)

        # Bot√µes de Verdadeiro/Falso
        # Os bot√µes ativam a fun√ß√£o check_answer e passam a resposta do usu√°rio
        
        # O argumento 'key' √© essencial para que o Streamlit saiba qual bot√£o foi clicado
        if col1.button("Verdadeiro", use_container_width=True, key=f"v_{st.session_state.question_index}", type="primary"):
            check_answer(True, correct_answer, explanation)

        if col2.button("Falso", use_container_width=True, key=f"f_{st.session_state.question_index}", type="secondary"):
            check_answer(False, correct_answer, explanation)

        st.markdown("---")
        
        # Bot√£o para avan√ßar (aparece apenas ap√≥s responder)
        if st.session_state.get('show_next', False):
            if st.button("Pr√≥xima Pergunta, Dattebayo!", use_container_width=True):
                next_question()
                st.experimental_rerun()

    else:
        # Fim do Quiz (sem atingir o objetivo)
        st.warning("## Miss√£o Hokage Falhada (Por enquanto...)")
        st.markdown(f"Voc√™ completou o quiz, mas conseguiu apenas **{current_score}** acertos. Voc√™ precisa treinar mais, Ttebayo!")
        if st.button("Tentar Novamente (N√£o desista!)", use_container_width=True, type="primary"):
            start_quiz()
            st.experimental_rerun()
